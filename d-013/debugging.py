"""
-=< 100 Days of Python >=-
-=[ Day 013 ]=-
"""
"""
In today's lessons we'll learn a bit about 'Debugging':
(i.e. the process of removing bugs from your code)
- How to understand error messages
- How to approach debugging
- Finding and fixing errors in our code
- Best practices, extra tools and useful tips
"""
"""
L.94 - Describe the Problem

The first step towards debugging a problem is to make sure that you actually
understand what it is the code is *meant* to be doing.
- i.e. do you understand the problem the code is trying to solve?

Let's look at the following example:
"""
for i in range(1, 20):
    if i == 20:
        print("You got it!")
"""
As you can probably see, at some point in the loop, it is meant to print a
line out to the console. However, when we actually run this code, nothing
get's printed out ... So what is going wrong?

Let's break this down and describe the problem:

1. What is the loop doing?
- It is looping through a range of numbers from 1 up to (not including) 20.

2. When is it meant to print "You got it!"?
- When the loop variable 'i' is equal to 20.

3. What are your assumptions about the value of 'i'?
- 'i' is equal to the value generated by the range function each iteration.
However, due to the range function's parameters (i.e. lower bound is
inclusive, upper bound is exclusive) 'i' will never be equal to 20, since
range will stop at 19 (excluding the upper bound)!


So, we can fix the code in one of two ways:
- 1. Change the test condition of the IF statement to equal the last number
that will actually be generated by the range function (i.e. 19).
- 2. Change the value of the second parameter in the range function so that
the last value it generates is 20, thereby satisfying the conditional test.

In practice, how we decide to fix this code may depend on the specific goals,
requirements or other qualifying factors of the larger program. However for
the purposes of this example let's assume that the conditional test has a
purpose, so we will change the upper bound of range to ensure that '20' is
generated:
"""
for i in range(1, 21):
    if i == 20:
        print("You got it!")

"""
L.95 - Reproduce the Bug

The next step to think about is how to go about reproducing the bug.

Programs typically have many variable factors which can change each time we
run them, due to different inputs or starting conditions etc. As such, it is
entirely possible that we could encounter a bug on one run through a program,
but not the next time we run it.

These kinds of intermittent bugs can be the hardest to chase down, and it can
be very confusing when a program works sometimes but not others. In these
cases working out exactly what is causing the bug can be a real challenge. So
having a planned, systematic and logical approach will help you to narrow
things down and identify the cause in an efficient manner.

We'll start with the following code:
"""
from random import randint  # nopep8
dice_images = ["①", "②", "③", "④", "⑤", "⑥"]
dice_num = randint(1, 6)
# $save
print(dice_images[dice_num] + "\n")
"""
When we run this code it mostly works, but occasionally we will get an error.
So, to debug this we need to figure out exactly when that error occurs
- i.e. what specific conditions cause the error.

We can see that the program is using 'randint', from the random module, to
generate a random whole number between 1 and 6. In the case of this example
that random number is really the only variable factor, so we know that it
must be one of the possible generated values which is causing the error.

We can test this theory, and help to identify the problem, by using
hard-coded values in place of the random numbers, to test each value in turn.
"""
# For the purpose of this example we can use a loop, as this will allow us to
# demonstrate all the possible values consecutively, one after another.
# Remembering to increment the upper-bound parameter so that '6' is included!
# $end
for n in range(1, 7):
    print(f"Testing number: {n}")
    print(dice_images[n])
print("\n")
"""
The output from this loop shows us that the value causing the error is '6'.
- The error message says: "list index out of range"

So, we know that the list object ('dice_images') does not have '6' in it's
index values.

However, the output also shows us that when we test the value '1' we get the
dice number '②' (rather than '①') ... why is that?

Well, if we remember (or look up) how indexing with Lists work, we realise
that the index starts at 0 (zero), for the item in the first position.

We know that the values generated by 'randint' will fall between 1 and 6
(inclusively), but we now know that the values we need for the list index
range from 0 to 5.
"""
# Let's show how the list's index values are associated with the items:
for index, item in enumerate(dice_images):
    print(f"List index '{index}' = {item}")
"""
With all of this information now in hand, we are able to update the code so
that we no longer get an error:
"""
# If we update the range values used with randint we no longer get the error!
dice_num = randint(0, 5)
print("\nFixed random dice roll:")
print(dice_images[dice_num] + "\n")

"""
L.96 - Play Computer and Evaluate Each Line

Another useful skill when it comes to debugging, and in fact programming in
general, is learning to think (or at least pretending to think) like a
computer. This can help with both planning and implementing your code,
anticipating how the computer will interpret it, as well as determining what
went wrong when an error inevitably does occur.

For this exercise, take a look at the code below:
"""
year = int(input("What's your year of birth? "))
if 1980 < year < 1994:
    print("You're a Millennial.")
elif year > 1994:
    print("You're a Gen-Z!")
"""
Play around and test the code, but notice what happens when you put in the
year "1994" ... absolutely nothing, you get no output -- So that's the bug!

Now we need to try to "think like a computer", run through the code line by
line, think about the logic and what it will evaluate to. Once we've
identified the error in the logic we can go ahead and fix the bug.

The problem is that 1994 is not less than (1st test) or greater than (2nd
test) 1994, it is exactly equal to it. So, currently there is no test
condition that captures the value 1994. -- I suppose the question now
becomes, is someone born in 1994 a 'Millennial' or a 'Gen-Z'?

Whichever your preference we can fix the program by updating one of the test
conditions to include this value, using either the "less-than or equal to" or
"greater-than or equal to" operator in the appropriate statement...
"""
if 1980 < year <= 1994:
    print("You're a Millennial.")
if year > 1994:
    print("You're a Gen-Z!")
# 'Gen-Z' is now effectively anyone born in or after 1995
"""
...of course we could have changed the comparison value instead of the
operator, but the point was to work out the error in the logic as it was
written -- Thinking like a Computer! =D
"""

"""
L.97 - Fixing Errors (and Watching for Red Underlines)

"""
